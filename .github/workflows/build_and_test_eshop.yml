name: Build and test eshop workflow

on:
  workflow_dispatch:
  push:

jobs:
#  Install:
#    runs-on: ubuntu-latest
#
#
#    steps:
#      - name: Code checkout
#        uses: actions/checkout@v2.5.0
#        with:
#          token: ${{ secrets.WORKFLOW_TOKEN }}
#      - name: Setup NodeJS
#        uses: actions/setup-node@v3.5.1
#        with:
#          node-version: 10
#      - name: Cache node modules
#        uses: actions/cache@v3.0.11
#        with:
#          path: node_modules
#          key: node_modules-${{ hashFiles('**/package-lock.json') }}
#          restore-keys: node_modules-
#      - name: Install packages with npm
#        run:  |
#          npm ci
#
#
#  Build:
#    needs: Install
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Code checkout
#        uses: actions/checkout@v2.5.0
#        with:
#          token: ${{ secrets.WORKFLOW_TOKEN }}
#      - name: Setup NodeJS
#        uses: actions/setup-node@v3.5.1
#        with:
#          node-version: 10
#      - name: Cache node modules
#        uses: actions/cache@v3.0.11
#        with:
#          path: node_modules
#          key: node_modules-${{ hashFiles('**/package-lock.json') }}
#      - name: Build
#        run: |
#          npm rebuild node-sass --force
#          npm run build -- --colors
#      - name: Cache node modules and build folder
#        if: ${{ github.ref == 'refs/heads/main' }}
#        uses: actions/cache@v3.0.11
#        with:
#          path: |
#            ~/.npm
#            ./node_modules
#            ./build
#          key: ${{ runner.os }}-build-${{ github.run_id }}
#          restore-keys: ${{ runner.os }}-build-${{ github.run_id }}

#  Test:
#    needs: Install
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Code checkout
#        uses: actions/checkout@v2.5.0
#        with:
#          token: ${{ secrets.WORKFLOW_TOKEN }}
#      - name: Setup NodeJS
#        uses: actions/setup-node@v3.5.1
#        with:
#          node-version: 10
#      - name: Cache node modules
#        uses: actions/cache@v3.0.11
#        with:
#          path: node_modules
#          key: node_modules-${{ hashFiles('**/package-lock.json') }}
#      - name: Run tests
#        run: |
#          npm run test -- --colors

#  Deploy:
#    needs: [Build, Test]
#    if: ${{ github.ref == 'refs/heads/main' }}
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Code checkout
#        uses: actions/checkout@v2.5.0
#        with:
#          token: ${{ secrets.WORKFLOW_TOKEN }}
#      - name: Setup python
#        uses: actions/setup-python@v2
#        with:
#          python-version: 3
#      - name: Install boto
#        run: |
#          pip3 install ansible boto boto3
#      - name: Run ansible playbook
#        uses: dawidd6/action-ansible-playbook@v2.6.1
#        with:
#          playbook: ec2-deploy.yml
#          directory: ./
#          key: ${{secrets.SSH_PRIVATE_KEY}}
#          vault_password: ${{secrets.VAULT_PASSWORD}}
#          requirements: galaxy-requirements.yml
#          options: |
#            -vvv

#  Deploy-with-bash:
##    needs: [Build, Test]
##    if: ${{ github.ref == 'refs/heads/main' }}
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Code checkout
#        uses: actions/checkout@v2.5.0
#        with:
#          token: ${{ secrets.WORKFLOW_TOKEN }}
#      - name: Setup SSH 
#        shell: bash
#        run: |
#         eval `ssh-agent -s`
#         mkdir -p ~/.ssh/
#         touch ~/.ssh/id_rsa
#         echo -e "${{secrets.SSH_PRIVATE_KEY}}" > ~/.ssh/id_rsa
#         chmod 700 ~/.ssh/id_rsa
#      - name: Setup python
#        uses: actions/setup-python@v2
#        with:
#          python-version: 3
#      - name: Install boto
#        run: |
#          pip3 install ansible boto boto3
#      - name: Run ansible script
#        shell: bash 
#        run: |
#          service ssh status
#          echo -e "${{secrets.VAULT_PASSWORD}}" > ./vault-password-file
#          ansible-playbook ec2-deploy.yml -vvv --private-key ~/.ssh/id_rsa --vault-password-file vault-password-file

  start-runner:
    name: Start self-hosted EC2 runner
    runs-on: ubuntu-latest
    outputs:
      label: ${{ steps.start-ec2-runner.outputs.label }}
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Start EC2 runner
        id: start-ec2-runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: start
          github-token: ${{ secrets.WORKFLOW_TOKEN }}
          ec2-image-id: ami-0b0dcb5067f052a63
          ec2-instance-type: t2.micro
          subnet-id: subnet-09caeb001f259efee3
          security-group-id: eshop

#  Deploy:
#    needs: [Build, Test]
#    if: ${{ github.ref == 'refs/heads/main' }}
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Code checkout
#        uses: actions/checkout@v2.5.0
#        with:
#          token: ${{ secrets.WORKFLOW_TOKEN }}
#      - name: Load Node modules and build folder
#        uses: actions/cache@v3.0.11
#        with:
#          path: |
#            ~/.npm
#            ./node_modules
#            ./build
#          key: ${{ runner.os }}-build-${{ github.run_id }}
#      - name: Deploy to Firebase
#        uses: lowply/deploy-firebase@v0.0.5
#        env:
#          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
#          FIREBASE_PROJECT: salavec-devops
